{"version":3,"sources":["components/Variables/Conexiones/ConfiguracionTablas.js"],"names":["campos","nombre","funciones","funcion","texto","funcionesTablas","ConfiguracionTablas","props","state","tablas","errorCreacionTabla","campo","descripcion","mostrar","idTablaSel","saveBitacora","bind","loadTables","insertTable","deleteTableConfirmation","deleteTable","dismissTableNewError","fecha","tipoVariable","idVariable","transaction","sql","Transaction","pool","begin","err","rolledBack","on","aborted","request","Request","query","userID","userName","getFullYear","getMonth","getDate","result","console","log","showMessage","rollback","commit","setState","recordset","nombreTabla","$","val","usuarioTabla","contrasenaTabla","servidorTabla","basedatosTabla","tablaTabla","funcionTabla","tipoConexion","length","showSuccesMessage","transaction1","request1","nuevosValores","Date","ID","id","configuracionHome","goOptions","display","alignItems","justifyContent","margin","map","tabla","i","width","border","cursor","height","marginRight","terminoSeleccionTabla","usuario","contrasena","servidor","baseDatos","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport sql from 'mssql';\n\nimport ErrorMessage from '../../ErrorMessage.js';\n\nconst campos = [ {nombre: \"varchar\"}, {nombre: \"bit\"}, {nombre: \"date\"}, {nombre: \"int\"} ];\nlet funciones = [ {funcion: \"idCliente\", texto: \"ID de Cliente\"}, {funcion: \"fecha\", texto: \"fecha\"}, {nombre: \"date\"}, {nombre: \"int\"} ];\nconst funcionesTablas = [{nombre: \"Otro\"}, {nombre: \"Pagos de Préstamos\"}, {nombre: \"Plan de Pagos\"}];\n\nexport default class ConfiguracionTablas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tablas: [],\n            errorCreacionTabla: {campo: \"\", descripcion: \"\", mostrar: false},\n            idTablaSel: -1\n        }\n        this.saveBitacora = this.saveBitacora.bind(this);\n        this.loadTables = this.loadTables.bind(this);\n        this.insertTable = this.insertTable.bind(this);\n        this.deleteTableConfirmation = this.deleteTableConfirmation.bind(this);\n        this.deleteTable = this.deleteTable.bind(this);\n        this.dismissTableNewError = this.dismissTableNewError.bind(this);\n    }\n    /* mensajeModal <- de state\n        //mostrarMensaje:bandera para mostrar modal mensaje en pantalla\n        //mensajeConfirmado:retorno del modal mensaje si fue conf\n        //esError:bandera para ver que tipo de modal mensaje mostrar\n        //esConfirmar:bandera para ver que tipo de modal mensaje mostrar\n        //titulo:titulo del modal\n        //mensaje:mensaje del modal\n        //banderaMetodoInit:variable para ver a que metodo ir cuando regresa de confirmar el modal\n        //idElementoSelec:id del elemento que mostro el modal mensaje\n        //indiceX:posicion de la tabla en el arreglo que mostro el modal mensaje\n        //indiceY:posicion del campo en el arreglo de tablas que mostro el modal mensaje\n    */\n\n    componentDidMount() {\n        this.loadTables();\n    }\n\n    saveBitacora (fecha, descripcion, tipoVariable, idVariable) {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"insert into Bitacora (usuarioID, nombreUsuario, fecha, descripcion, tipoVariable, idVariable) values (\"+this.props.userID+\", '\"+this.props.userName+\"', '\"+fecha.getFullYear()+\"-\"+(fecha.getMonth()+1)+\"-\"+fecha.getDate()+\"', '\"+descripcion+\"', '\"+tipoVariable+\"', \"+idVariable+\")\", (err, result) => {\n                if (err) {\n                    console.log(err);\n                    this.props.showMessage(\"Error\", 'No se pudo guardar información de bitacora.', true, false, {});\n                    if (!rolledBack) {\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    loadTables() {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from Tablas\", (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.setState({\n                            tablas: result.recordset\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    insertTable() {\n        let nombreTabla = $(\"#nombreTablaNuevo\").val();\n        let usuarioTabla = $(\"#usuarioTablaNuevo\").val();\n        let contrasenaTabla = $(\"#contrasenaTablaNuevo\").val();\n        let servidorTabla = $(\"#servidorTablaNuevo\").val();\n        let basedatosTabla = $(\"#basedatosTablaNuevo\").val();\n        let tablaTabla = $(\"#tablaTablaNuevo\").val();\n        let funcionTabla = $(\"#funcionTabla\").val();\n        let tipoConexion = $(\"#tipoConexion\").val();\n        if(nombreTabla.length > 0 && nombreTabla.length < 71) {\n            if(usuarioTabla.length > 0 && usuarioTabla.length < 51) {\n                if(contrasenaTabla.length > 0 && contrasenaTabla.length < 201) {\n                    if(servidorTabla.length > 0 && servidorTabla.length < 51) {\n                        if(basedatosTabla.length > 0 && basedatosTabla.length < 51) {\n                            if(tablaTabla.length > 0 && tablaTabla.length < 71) {\n                                if(tipoConexion.length > 0 && tipoConexion.length < 31) {\n                                    this.setState({\n                                        errorCreacionTabla: {campo: \"\", descripcion: \"\", mostrar: false}\n                                    });\n                                    const transaction = new sql.Transaction( this.props.pool );\n                                    transaction.begin(err => {\n                                        var rolledBack = false;\n                                        transaction.on('rollback', aborted => {\n                                            rolledBack = true;\n                                        });\n                                        const request = new sql.Request(transaction);\n                                        request.query(\"insert into Tablas (Nombre, Usuario, Contrasena, Servidor, BaseDatos, Tabla, tipoConexion) values ('\"+nombreTabla+\"','\"+usuarioTabla+\"','\"+contrasenaTabla+\"','\"+servidorTabla+\"','\"+basedatosTabla+\"','\"+tablaTabla+\"','\"+tipoConexion+\"')\", (err, result) => {\n                                            if (err) {\n                                                if (!rolledBack) {\n                                                    console.log(err);\n                                                    transaction.rollback(err => {\n                                                    });\n                                                }\n                                            } else {\n                                                transaction.commit(err => {\n                                                    this.props.showSuccesMessage(\"Exito\", \"Tabla creada con éxito.\");\n                                                    this.loadTables();\n                                                    \n                                                    const transaction1 = new sql.Transaction( this.props.pool );\n                                                    transaction1.begin(err => {\n                                                        var rolledBack = false;\n                                                        transaction1.on('rollback', aborted => {\n                                                            rolledBack = true;\n                                                        });\n                                                        const request1 = new sql.Request(transaction1);\n                                                        request1.query(\"select top 1 * from Tablas order by ID desc\", (err, result) => {\n                                                            if (err) {\n                                                                if (!rolledBack) {\n                                                                    console.log(err);\n                                                                    transaction1.rollback(err => {\n                                                                    });\n                                                                }\n                                                            } else {\n                                                                transaction1.commit(err => {\n                                                                    if(result.recordset.length > 0) {\n                                                                        var nuevosValores = 'nombre: '+nombreTabla+'\\n'+\n                                                                                            'usuario: '+usuarioTabla+'\\n'+\n                                                                                            'servidor: '+servidorTabla+'\\n'+\n                                                                                            'base de datos: '+basedatosTabla+'\\n'+\n                                                                                            'tabla: '+tablaTabla+'\\n'+\n                                                                                            'tipo de conexión: '+tipoConexion;\n                                                                        this.saveBitacora(new Date(), \"Usuario: \"+this.props.userName+\" creo la tabla: \"+nombreTabla+\"\\nValores: \\n\"+nuevosValores, \"tabla\", result.recordset[0].ID);\n                                                                    }\n                                                                });\n                                                            }\n                                                        });\n                                                    }); // fin transaction1\n                                                });\n                                            }\n                                        });\n                                    }); // fin transaction\n                                } else {\n                                    let campo = \"Tipo de Conexión\";\n                                    let descripcion;\n                                    if(tipoConexion.length == 0)\n                                        descripcion = \"El campo debe tener una longitud mayor a 0.\";\n                                    else\n                                        descripcion = \"El campo debe tener una longitud menor a 31.\";\n                                    this.setState({\n                                        errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n                                    });\n                                }\n                            } else {\n                                let campo = \"Nombre de la Tabla\";\n                                let descripcion;\n                                if(tablaTabla.length == 0)\n                                    descripcion = \"El campo debe tener una longitud mayor a 0.\";\n                                else\n                                    descripcion = \"El campo debe tener una longitud menor a 71.\";\n                                this.setState({\n                                    errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n                                });\n                            }\n                        } else {\n                            let campo = \"Base de Datos de la Tabla\";\n                            let descripcion;\n                            if(basedatosTabla.length == 0)\n                                descripcion = \"El campo debe tener una longitud mayor a 0.\";\n                            else\n                                descripcion = \"El campo debe tener una longitud menor a 51.\";\n                            this.setState({\n                                errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n                            });\n                        }\n                    } else {\n                        let campo = \"Servidor de la Tabla\";\n                        let descripcion;\n                        if(servidorTabla.length == 0)\n                            descripcion = \"El campo debe tener una longitud mayor a 0.\";\n                        else\n                            descripcion = \"El campo debe tener una longitud menor a 51.\";\n                        this.setState({\n                            errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n                        });\n                    }\n                } else {\n                    let campo = \"Contraseña de la Tabla\";\n                    let descripcion;\n                    if(contrasenaTabla.length == 0)\n                        descripcion = \"El campo debe tener una longitud mayor a 0.\";\n                    else\n                        descripcion = \"El campo debe tener una longitud menor a 201.\";\n                    this.setState({\n                        errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n                    });\n                }\n            } else {\n                let campo = \"Usuario de la Tabla\";\n                let descripcion;\n                if(usuarioTabla.length == 0)\n                    descripcion = \"El campo debe tener una longitud mayor a 0.\";\n                else\n                    descripcion = \"El campo debe tener una longitud menor a 51.\";\n                this.setState({\n                    errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n                });\n            }\n        } else {\n            let campo = \"Nombre de la Conexión\";\n            let descripcion;\n            if(nombreTabla.length == 0)\n                descripcion = \"El campo debe tener una longitud mayor a 0.\";\n            else\n                descripcion = \"El campo debe tener una longitud menor a 71.\";\n            this.setState({\n                errorCreacionTabla: {campo: campo, descripcion: descripcion, mostrar: true}\n            });\n        }\n    }\n\n    deleteTableConfirmation(id) {\n        this.props.showMessage(\"Confirmación\", \"Esta seguro que desea eliminar la tabla?\", false, true, this.deleteTable );\n        this.setState({\n            idTablaSel: id\n        });\n    }\n\n    deleteTable(id) {\n        if(this.state.idTablaSel != -1) {\n            const transaction = new sql.Transaction( this.props.pool );\n            transaction.begin(err => {\n                var rolledBack = false;\n                transaction.on('rollback', aborted => {\n                    rolledBack = true;\n                });\n                const request = new sql.Request(transaction);\n                request.query(\"delete from Tablas where ID = \"+this.state.idTablaSel, (err, result) => {\n                    if (err) {\n                        if (!rolledBack) {\n                            console.log(err);\n                            transaction.rollback(err => {\n                            });\n                        }\n                    } else {\n                        transaction.commit(err => {\n                            // 1. Make a shallow copy of the items\n                            /*let tablas = [...this.state.tablas];\n                            // 3. Replace the property you're intested in\n                            tablas.splice(this.state.mensajeModal.indiceX, 1);*/\n                            // 5. Set the state to our new copy\n                            this.loadTables();\n                            this.props.showSuccesMessage(\"Exito\", \"Tabla eliminada con éxito.\");\n                            this.saveBitacora(new Date(), \"Usuario: \"+this.props.userName+\" elimino la tabla: \"+nombreTabla, \"tabla\", result.recordset[0].ID);\n                        });\n                    }\n                });\n            }); // fin transaction\n        }\n    }\n\n\n    /*======_______====== ======_______======   MENSAJES ERROR DE CAMPOS    ======_______====== ======_______======*/\n    /*======_______======                                                                       ======_______======*/\n    /*======_______======                                                                       ======_______======*/\n    /*======_______====== ======_______====== ====_____====  ====_____====  ======_______====== ======_______======*/\n\n    dismissTableNewError() {\n        this.setState({\n            errorCreacionTabla: {campo: \"\", descripcion: \"\", mostrar: false}\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"row\"}>\n                    <div className={\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\"}>\n                        <div className={\"page-header\"}>\n                            <h2 className={\"pageheader-title\"}>Configuraci&oacute;n de Conexiones a las Tablas</h2>\n                            <div className={\"page-breadcrumb\"}>\n                                <nav aria-label=\"breadcrumb\">\n                                    <ol className={\"breadcrumb\"}>\n                                        <li className={\"breadcrumb-item font-16\"} aria-current=\"page\" onClick={this.props.configuracionHome}><a href=\"#\" className={\"breadcrumb-link\"}>Configuraci&oacute;n</a></li>\n                                        <li className={\"breadcrumb-item font-16\"} aria-current=\"page\" onClick={this.props.goOptions}><a href=\"#\" className={\"breadcrumb-link\"}>Tipo de Configuraci&oacute;n</a></li>\n                                        <li className={\"breadcrumb-item active font-16\"} aria-current=\"page\">Tablas</li>\n                                    </ol>\n                                </nav>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\">\n                    <h2>Descripción</h2>\n                    <p className=\"lead\">\n                        Esta sección consiste en administrar las configuraciones necesarias para que el programa pueda conectarse con las tablas internas, para seleccionar los campos bases de los cuales se crearán las variables y consecuentemente los cálculos de indicadores y riesgos.\n                    </p>\n                    <ul className=\"list-unstyled arrow\">\n                        <li>Nombre de la Conecci&oacute;n: Nombre de referencia dentro del programa para refererse a la tabla de la institución</li>\n                        <li>Usuario de la Tabla: Usuario para acceder a la base de Datos</li>\n                        <li>Contrase&ntilde;a de la Tabla: Contraseña para acceder a la base de Datos</li>\n                        <li>Servidor de la Tabla: Servidor donde se encuentra la base de Datos</li>\n                        <li>Base de Datos de la Tabla: Nombre de la base de Datos donde se encuentra la tabla</li>\n                        <li>Nombre de la Tabla: Nombre de la tabla a acceder a la base de Datos</li>\n                        <li>Tipo de Conexi&oacute;n: Tipo de conexión de la base de datos</li>\n                    </ul>\n                </div>\n                <div className={\"row\"}>\n                    <div className={\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\"}>\n                        <div className={\"card influencer-profile-data\"}>\n                            <div className={\"card-body\"}>\n                                <h3>Crear Nueva Tabla</h3>\n                                <div className={\"row border-top\"}>\n                                    <div className=\"form-group col-xl-6 col-6\">\n                                        <label className={\"col-form-label\"}>Nombre de la Conecci&oacute;n</label>\n                                        <input id=\"nombreTablaNuevo\" type=\"text\" className={\"form-control\"}/>\n                                    </div>\n                                    <div className=\"form-group col-xl-6 col-6\">\n                                        <label className={\"col-form-label\"}>Usuario de la Tabla</label>\n                                        <input id=\"usuarioTablaNuevo\" type=\"text\" className={\"form-control\"}/>\n                                    </div>\n                                </div>\n                                <div className={\"row\"}>\n                                    <div className=\"form-group col-xl-6 col-6\">\n                                        <label className={\"col-form-label\"}>Contrase&ntilde;a de la Tabla</label>\n                                        <input id=\"contrasenaTablaNuevo\" type=\"text\" className={\"form-control\"}/>\n                                    </div>\n                                    <div className=\"form-group col-xl-6 col-6\">\n                                        <label className={\"col-form-label\"}>Servidor de la Tabla</label>\n                                        <input id=\"servidorTablaNuevo\" type=\"text\" className={\"form-control\"}/>\n                                    </div>\n                                </div>\n                                <div className={\"row\"}>\n                                    <div className=\"form-group col-xl-6 col-6\">\n                                        <label className={\"col-form-label\"}>Base de Datos de la Tabla</label>\n                                        <input id=\"basedatosTablaNuevo\" type=\"text\" className={\"form-control\"}/>\n                                    </div>\n                                    <div className=\"form-group col-xl-6 col-6\">\n                                        <label className={\"col-form-label\"}>Nombre de la Tabla</label>\n                                        <input id=\"tablaTablaNuevo\" type=\"text\" className={\"form-control\"}/>\n                                    </div>\n                                </div>\n                                <div className={\"row\"} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                                    <select id=\"tipoConexion\" className=\"form-control\">\n                                        <option value=\"sql\">Transact-SQL</option>\n                                    </select>\n                                </div>\n                                { this.state.errorCreacionTabla.mostrar ? (\n                                    <ErrorMessage campo={this.state.errorCreacionTabla.campo} descripcion={this.state.errorCreacionTabla.descripcion} dismissTableError={this.dismissTableNewError}> </ErrorMessage>\n                                ) : (\n                                    <span></span>\n                                )}\n                                <br/>\n                                <div className={\"row\"}>\n                                    <button onClick={this.insertTable} className={\"btn btn-success btn-block col-xl-10 col-10 font-bold font-20\"} style={{margin: \"0 auto\", display: \"block\"}}>Crear</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                {this.state.tablas.map((tabla, i) => (\n                    <div key={tabla.ID} className={\"row\"} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                        <div className={\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\"} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                            <div className=\"card-header bg-primary p-3\" style={{width: \"100%\"}}>\n                                <h4 className=\"mb-0 text-white\" style={{display: \"inline\"}}> {tabla.nombre} </h4>\n                                <div style={{float: \"right\", border: \"2px solid #000\", cursor: \"pointer\"}}>\n                                    <img onClick={() => this.deleteTableConfirmation(tabla.ID, i)} src={\"../assets/trash.png\"} style={{height: \"20px\", width: \"20px\"}}></img>\n                                </div>\n                                <div style={{float: \"right\", border: \"2px solid #000\", marginRight: \"10px\", cursor: \"pointer\"}}>\n                                    <img onClick={() => this.props.terminoSeleccionTabla(tabla.ID, tabla.tabla, tabla.usuario, tabla.contrasena, tabla.servidor, tabla.baseDatos, tabla.tabla, tabla.tipoConexion)} src={\"../assets/edit.png\"} style={{height: \"20px\", width: \"20px\"}}></img>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n                <br/>\n            </div>\n        );\n    }\n}\n"],"file":"ConfiguracionTablas.js"}