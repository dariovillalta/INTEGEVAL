{"version":3,"sources":["components/Variables/Variables/EditarVariable/InstruccionSQL.js"],"names":["tipoCampos","nombre","InstruccionSQL","props","state","mostrarModal","tituloModal","indexVarSeleccionado","openModal","bind","mostrarCampos","actualizarCampo","closeModal","index","camposInstruccionSQL","setState","tipo","setTimeout","$","val","length","alert","navbar","width","paddingLeft","nombreVariable","map","campo","i","display","alignItems","justifyContent","height","marginRight","agregarCampo","comandoSQL","color","agregarInstruccionSQL","fontSize","fontWeight","eliminarCampo","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Modal from '../../../Modal/Modal.js';\n\nconst tipoCampos = [ {nombre: \"varchar\"}, {nombre: \"bit\"}, {nombre: \"date\"}, {nombre: \"int\"}, {nombre: \"decimal\"}];\n\nexport default class InstruccionSQL extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mostrarModal: false,\n            tituloModal: \"\",\n            indexVarSeleccionado: -1\n        }\n        this.openModal = this.openModal.bind(this);\n        this.mostrarCampos = this.mostrarCampos.bind(this);\n        this.actualizarCampo = this.actualizarCampo.bind(this);\n        this.closeModal = this.closeModal.bind(this);\n    }\n\n    componentDidMount() {\n        //this.getCampos();\n    }\n\n    openModal (index) {\n        var nombre = this.props.camposInstruccionSQL[index].nombre;\n        this.setState({\n            mostrarModal: true,\n            tituloModal: \"Modificar: \"+nombre,\n            indexVarSeleccionado: index\n        }, this.mostrarCampos(index) );\n    }\n\n    mostrarCampos (index) {\n        var nombre = this.props.camposInstruccionSQL[index].nombre;\n        var tipo = this.props.camposInstruccionSQL[index].tipo;\n        setTimeout(function(){\n            $(\"#nombreVariable\").val(nombre);\n            $(\"#tipoEdit\").val(tipo);\n        }, 500);\n    }\n\n    actualizarCampo () {\n        var nombre = $(\"#nombreVariable\").val();\n        var tipo = $(\"#tipoEdit\").val();\n        if(nombre.length > 0 && nombre.length < 101) {\n            if(tipo.length > 0 && tipo.length < 31) {\n                this.props.actualizarCampo(this.state.indexVarSeleccionado, nombre, tipo);\n            } else {\n                alert(\"El tipo de la variable debe ser mayor a 0 caracteres y menor a 31.\");\n            }\n        } else {\n            alert(\"El nombre de la variable debe ser mayor a 0 caracteres y menor a 101.\");\n        }\n    }\n\n    closeModal () {\n        this.setState({\n            mostrarModal: false\n        });\n    }\n\n    /*getCampos () {\n        const transaction = new sql.Transaction( this.props.pool );\n        transaction.begin(err => {\n            var rolledBack = false;\n            transaction.on('rollback', aborted => {\n                rolledBack = true;\n            });\n            const request = new sql.Request(transaction);\n            request.query(\"select * from InstruccionSQLCampos where variableID = \"+this.props.variableID, (err, result) => {\n                if (err) {\n                    if (!rolledBack) {\n                        console.log(err);\n                        transaction.rollback(err => {\n                        });\n                    }\n                } else {\n                    transaction.commit(err => {\n                        this.setState({\n                            camposInstruccionSQL: result.recordset\n                        });\n                    });\n                }\n            });\n        }); // fin transaction\n    }\n\n    agregarCampo () {\n        var nombreCampo = $(\"#nuevoCampo\").val();\n        var variableID = this.props.variableID;\n        var tipo = $(\"#tipo\").val();\n        if(nombreCampo.length < 101) {\n            const transaction = new sql.Transaction( this.props.pool );\n            transaction.begin(err => {\n                var rolledBack = false;\n                transaction.on('rollback', aborted => {\n                    rolledBack = true;\n                });\n                const request = new sql.Request(transaction);\n                request.query(\"insert into InstruccionSQLCampos (variableID, nombre, tipo) values (\"+variableID+\", '\"+nombreCampo+\"', '\"+tipo+\"')\", (err, result) => {\n                    if (err) {\n                        if (!rolledBack) {\n                            console.log(err);\n                            transaction.rollback(err => {\n                            });\n                        }\n                    } else {\n                        transaction.commit(err => {\n                            alert(\"Campo creado.\");\n                            this.getCampos();\n                        });\n                    }\n                });\n            }); // fin transaction\n        } else {\n            alert(\"El nombre del campo debe tener una longitud menor a 101 caracteres.\");\n        }\n    }\n\n    agregarInstruccionSQL () {\n        var instruccionSQL = $(\"#comandoSQL\").val();\n        var variableID = this.props.variableID;\n        if(instruccionSQL.length < 1001) {\n            const transaction = new sql.Transaction( this.props.pool );\n            transaction.begin(err => {\n                var rolledBack = false;\n                transaction.on('rollback', aborted => {\n                    rolledBack = true;\n                });\n                const request = new sql.Request(transaction);\n                request.query(\"insert into InstruccionSQL (variableID, instruccionSQL) values (\"+variableID+\", '\"+instruccionSQL+\"')\", (err, result) => {\n                    if (err) {\n                        if (!rolledBack) {\n                            console.log(err);\n                            transaction.rollback(err => {\n                            });\n                        }\n                    } else {\n                        transaction.commit(err => {\n                            alert(\"Instrucción SQL creado.\");\n                        });\n                    }\n                });\n            }); // fin transaction\n        } else {\n            alert(\"El nombre del campo debe tener una longitud menor a 1001 caracteres.\");\n        }\n    }*/\n    \n    render() {\n        return (\n            <div>\n                {this.props.navbar}\n                <div className={\"row\"} style={{width: \"100%\"}}>\n                    <div className={\"card\"} style={{width: \"100%\"}}>\n                        <br/>\n                        <div style={{width: \"100%\", paddingLeft: \"15px\"}}>\n                            <h4>Crear Campos: {this.props.nombreVariable}</h4>\n                        </div>\n                        <br/>\n                        <div className={\"row\"} style={{width: \"100%\"}}>\n                            <div className={\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12 form-group text-center\"}>\n                                <table className=\"table\">\n                                    <thead>\n                                        <tr>\n                                            <th scope=\"col\">#</th>\n                                            <th scope=\"col\">Nombre</th>\n                                            <th scope=\"col\">Tipo</th>\n                                            <th scope=\"col\">Modificar</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {this.props.camposInstruccionSQL.map((campo, i) => (\n                                            <tr key={campo.nombre}>\n                                                <th scope=\"row\">{i}</th>\n                                                <td>{campo.nombre}</td>\n                                                <td>{campo.tipo}</td>\n                                                <td style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                                                    <img onClick={() => this.openModal(i)} src={\"../assets/edit.png\"} style={{height: \"20px\", width: \"20px\", display: \"block\", marginRight: \"10px\"}} className=\"addPointer\"></img>\n                                                </td>\n                                            </tr>\n                                        ))}\n                                        <tr>\n                                            <th scope=\"row\">#</th>\n                                            <td><input id=\"nuevoCampo\" type=\"text\" className=\"form-control\"/></td>\n                                            <td>\n                                                <select id=\"tipo\" className=\"form-control\">\n                                                    {tipoCampos.map((tipo, i) =>\n                                                        <option value={tipo.nombre} key={tipo.nombre}>{tipo.nombre}</option>\n                                                    )}\n                                                </select>\n                                            </td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                        <br/>\n                        <div className={\"text-center\"} style={{width: \"100%\"}}>\n                            <a href=\"#\" className=\"btn btn-primary active\" onClick={this.props.agregarCampo}>Agregar Campo</a>\n                        </div>\n                        <br/>\n                        <hr/>\n                        <br/>\n                        <div className={\"row\"} style={{width: \"100%\", display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                            <textarea className=\"form-control\" id=\"comandoSQL\" defaultValue={this.props.comandoSQL} rows=\"7\" style={{width: \"90%\"}}></textarea>\n                        </div>\n                        <hr/>\n                        <div className={\"row\"} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                            <a className={\"btn btn-primary btnWhiteColorHover font-bold font-20\"} style={{color: \"#fafafa\"}} onClick={this.props.agregarInstruccionSQL}>Guardar Comando SQL</a>\n                        </div>\n                        <br/>\n                    </div>\n                </div>\n                <Modal show={this.state.mostrarModal}\n                    titulo={this.state.tituloModal}\n                    onClose={this.closeModal}>\n                        <div className={\"row\"} style={{width: \"100%\"}}>\n                            <div className={\"col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 form-group\"}>\n                                <label htmlFor={\"nombreVariable\"} className=\"col-form-label\">Nombre de Variable:</label>\n                            </div>\n                            <div className={\"col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 form-group\"} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                                <input id={\"nombreVariable\"} type=\"text\" className=\"form-control form-control-sm\"/>\n                            </div>\n                        </div>\n                        <div className={\"row\"} style={{width: \"100%\"}}>\n                            <div className={\"col-xl-3 col-lg-3 col-md-3 col-sm-3 col-3 form-group\"}>\n                                <label htmlFor={\"tipoEdit\"} className=\"col-form-label\">Tipo de Variable:</label>\n                            </div>\n                            <div className={\"col-xl-9 col-lg-9 col-md-9 col-sm-9 col-9 form-group\"} style={{display: \"flex\", alignItems: \"center\", justifyContent: \"center\"}}>\n                                <select id=\"tipoEdit\" className=\"form-control\">\n                                    {tipoCampos.map((tipo, i) =>\n                                        <option value={tipo.nombre} key={tipo.nombre}>{tipo.nombre}</option>\n                                    )}\n                                </select>\n                            </div>\n                        </div>\n                        <div className={\"text-center\"}>\n                            <a onClick={this.actualizarCampo} className={\"btn btn-primary col-xs-5 col-5\"} style={{color: \"white\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>Actualizar Variable</a>\n                            <span className={\"col-xs-1 col-1\"}></span>\n                            <a onClick={() => this.props.eliminarCampo(this.state.indexVarSeleccionado)} className={\"btn btn-primary col-xs-5 col-5\"} style={{color: \"white\", fontSize: \"1.2em\", fontWeight: \"bold\"}}>Eliminar Variable</a>\n                        </div>\n                </Modal>\n            </div>\n        );\n    }\n}\n"],"file":"InstruccionSQL.js"}