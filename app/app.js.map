{"version":3,"sources":["app.js"],"names":["App","state","isLoggedIn","userName","permision","config","pool","login","bind","logOff","readConfigFile","connectToDB","setState","fs","readFile","err","data","alert","lineas","split","user","password","server","database","i","length","toString","undefined","configTemp","stream","max","min","idleTimeoutMillis","options","useUTC","poolTemp","sql","ConnectionPool","console","log","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport sql from 'mssql';\nimport fs from 'fs';\n\nimport Layout from './components/Layout.js';\nimport LoginPage from './components/LoginPage.js';\n//import odbc from 'odbc';\n\n/*const config = {\n    user: 'SA',\n    password: 'password111!',\n    server: 'localhost',\n    database: 'TOLOC_INTEG',\n    stream: true,\n    pool: {\n        max: 40,\n        min: 0,\n        idleTimeoutMillis: 60000\n    },\n    options: {\n        useUTC: false\n    }\n}*/\n\n/*const pool = new sql.ConnectionPool(config, err => {\n    if(err) {\n        console.log(err);\n        console.log(\"Error en conecci贸n con la base de datos\");\n        $(\"body\").overhang({\n            type: \"error\",\n            primary: \"#f84a1d\",\n            accent: \"#d94e2a\",\n            message: \"Error en conecci贸n con la base de datos.\",\n            overlay: true,\n            closeConfirm: true\n        });\n    } else {\n        console.log('pool loaded');\n    }\n});*/\n\nexport default class App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoggedIn: false,\n            userName: null,\n            permision: \"\",\n            config: {},\n            pool: null\n        }\n        // connection2 is now an open Connection\n        this.login = this.login.bind(this);\n        this.logOff = this.logOff.bind(this);\n        this.readConfigFile = this.readConfigFile.bind(this);\n        this.connectToDB = this.connectToDB.bind(this);\n    }\n\n    componentDidMount() {\n        this.readConfigFile();\n    }\n\n    login(userName, permision) {\n        this.setState({\n            isLoggedIn: true,\n            userName: null,\n            permision: permision\n        });\n    }\n\n    logOff () {\n        this.setState({\n            isLoggedIn: false\n        });\n    }\n\n    readConfigFile () {\n        fs.readFile('./conf.dar', 'utf-8', (err, data) => {\n            if(err) {\n                alert(\"Error al leer el archivo de configuracion de tabla.\")\n            } else {\n                var lineas = data.split(\"\\n\");\n                var user, password, server, database;\n                for (var i = 0; i < lineas.length; i++) {\n                    if(i == 0) {\n                        //var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        //var despues = bytes.toString(CryptoJS.enc.Utf8);\n                        user = lineas[i].toString();\n                    } else if(i == 1) {\n                        /*var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        var despues = bytes.toString(CryptoJS.enc.Utf8);*/\n                        password = lineas[i].toString();\n                    } else if(i == 2) {\n                        /*var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        var despues = bytes.toString(CryptoJS.enc.Utf8);*/\n                        server = lineas[i].toString();\n                    } else if(i == 3) {\n                        /*var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        var despues = bytes.toString(CryptoJS.enc.Utf8);*/\n                        database = lineas[i].toString();\n                    }\n                };\n                if(user != undefined && password != undefined && server != undefined && database != undefined ) {\n                    var configTemp  = {\n                        user: user,\n                        password: password,\n                        server: server,\n                        database: database,\n                        stream: true,\n                        pool: {\n                            max: 40,\n                            min: 0,\n                            idleTimeoutMillis: 60000\n                        },\n                        options: {\n                            useUTC: false\n                        }\n                    }\n                    this.setState({\n                        config: configTemp\n                    }, this.connectToDB );\n                }\n            }\n        });\n    }\n\n    connectToDB () {\n        var poolTemp = new sql.ConnectionPool(this.state.config, err => {\n            if(err) {\n                console.log(err);\n                console.log(\"Error en conecci贸n con la base de datos\");\n                alert(\"Error en conecci贸n con la base de datos\");\n            } else {\n                console.log('pool loaded');\n            }\n        });\n        this.setState({\n            pool: poolTemp\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                { this.state.isLoggedIn ? (\n                    <Layout userName={this.state.userName} permision={this.state.permision} logOff={this.logOff} pool={this.state.pool}> </Layout>\n                ) : (\n                    <LoginPage login={this.login} pool={this.state.pool} readConfigFile={this.readConfigFile}> </LoginPage>\n                )}\n            </div>\n        );\n    }\n}\n"],"file":"app.js"}