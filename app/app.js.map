{"version":3,"sources":["app.js"],"names":["App","state","isLoggedIn","userID","userName","permision","config","pool","conexionAbierta","mensajeModal","mostrarMensaje","mensajeConfirmado","esError","esConfirmar","titulo","mensaje","login","bind","logOff","readConfigFile","connectToDB","dismissMessageModal","showMessage","id","setState","fs","readFile","err","data","lineas","split","user","password","server","database","i","length","toString","undefined","configTemp","stream","max","min","idleTimeoutMillis","options","useUTC","poolTemp","sql","ConnectionPool","console","log","React","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport sql from 'mssql';\nimport fs from 'fs';\n\nimport Layout from './components/Layout.js';\nimport LoginPage from './components/LoginPage.js';\nimport MessageModal from './components/MessageModal.js';\n//import odbc from 'odbc';\n\n/*const config = {\n    user: 'SA',\n    password: 'password111!',\n    server: 'localhost',\n    database: 'TOLOC_INTEG',\n    stream: true,\n    pool: {\n        max: 40,\n        min: 0,\n        idleTimeoutMillis: 60000\n    },\n    options: {\n        useUTC: false\n    }\n}*/\n\n/*const pool = new sql.ConnectionPool(config, err => {\n    if(err) {\n        console.log(err);\n        console.log(\"Error en conección con la base de datos\");\n        $(\"body\").overhang({\n            type: \"error\",\n            primary: \"#f84a1d\",\n            accent: \"#d94e2a\",\n            message: \"Error en conección con la base de datos.\",\n            overlay: true,\n            closeConfirm: true\n        });\n    } else {\n        console.log('pool loaded');\n    }\n});*/\n\nexport default class App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            isLoggedIn: false,\n            userID: -1,\n            userName: null,\n            permision: \"\",\n            config: {},\n            pool: null,\n            conexionAbierta: false,\n            mensajeModal: {mostrarMensaje: false, mensajeConfirmado: false, esError: false, esConfirmar: false, titulo: \"\", mensaje: \"\"}\n        }\n        // connection2 is now an open Connection\n        this.login = this.login.bind(this);\n        this.logOff = this.logOff.bind(this);\n        this.readConfigFile = this.readConfigFile.bind(this);\n        this.connectToDB = this.connectToDB.bind(this);\n        this.dismissMessageModal = this.dismissMessageModal.bind(this);\n        this.showMessage = this.showMessage.bind(this);\n    }\n\n    componentDidMount() {\n        this.readConfigFile();\n    }\n\n    login(id, userName, permision) {\n        this.setState({\n            isLoggedIn: true,\n            userID: id,\n            userName: userName,\n            permision: permision\n        });\n    }\n\n    logOff () {\n        this.setState({\n            isLoggedIn: false,\n            userID: -1,\n            userName: null,\n            permision: \"\",\n        });\n    }\n\n    readConfigFile () {\n        fs.readFile('./conf.dar', 'utf-8', (err, data) => {\n            if(err) {\n                this.setState({\n                    mensajeModal: {mostrarMensaje: true, mensajeConfirmado: false, esError: true, esConfirmar: false, titulo: \"Error\", mensaje: \"Error al leer el archivo de configuracion de tabla.\"}\n                });\n            } else {\n                var lineas = data.split(\"\\n\");\n                var user, password, server, database;\n                for (var i = 0; i < lineas.length; i++) {\n                    if(i == 0) {\n                        //var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        //var despues = bytes.toString(CryptoJS.enc.Utf8);\n                        user = lineas[i].toString();\n                    } else if(i == 1) {\n                        /*var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        var despues = bytes.toString(CryptoJS.enc.Utf8);*/\n                        password = lineas[i].toString();\n                    } else if(i == 2) {\n                        /*var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        var despues = bytes.toString(CryptoJS.enc.Utf8);*/\n                        server = lineas[i].toString();\n                    } else if(i == 3) {\n                        /*var bytes = CryptoJS.AES.decrypt(lineas[i].replace(/\\r?\\n|\\r/g), 'AncientAliens');\n                        var despues = bytes.toString(CryptoJS.enc.Utf8);*/\n                        database = lineas[i].toString();\n                    }\n                };\n                if(user != undefined && password != undefined && server != undefined && database != undefined ) {\n                    var configTemp  = {\n                        user: user,\n                        password: password,\n                        server: server,\n                        database: database,\n                        stream: true,\n                        pool: {\n                            max: 40,\n                            min: 0,\n                            idleTimeoutMillis: 60000\n                        },\n                        options: {\n                            useUTC: false\n                        }\n                    }\n                    this.setState({\n                        config: configTemp\n                    }, this.connectToDB );\n                }\n            }\n        });\n    }\n\n    connectToDB () {\n        var poolTemp = new sql.ConnectionPool(this.state.config, err => {\n            if(err) {\n                console.log(err);\n                console.log(\"Error en conección con la base de datos\");\n                this.setState({\n                    mensajeModal: {mostrarMensaje: true, mensajeConfirmado: false, esError: true, esConfirmar: false, titulo: \"Error\", mensaje: \"Error en conección con la base de datos. Ver Consola.\"}\n                });\n            } else {\n                console.log('pool loaded');\n                this.setState({\n                    conexionAbierta: true\n                });\n            }\n        });\n        this.setState({\n            pool: poolTemp\n        });\n    }\n\n    dismissMessageModal() {\n        this.setState({\n            mensajeModal: {mostrarMensaje: false, mensajeConfirmado: false, esError: false, esConfirmar: false, titulo: \"\", mensaje: \"\"}\n        });\n    }\n\n    showMessage(titulo, mensaje, esError, esConfirmar) {\n        this.setState({\n            mensajeModal: {mostrarMensaje: true, esError: esError, esConfirmar: esConfirmar, titulo: titulo, mensaje: mensaje}\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                { this.state.isLoggedIn ? (\n                    <Layout userID={this.state.userID} userName={this.state.userName} permision={this.state.permision} logOff={this.logOff} pool={this.state.pool}> </Layout>\n                ) : (\n                    <LoginPage login={this.login} pool={this.state.pool} readConfigFile={this.readConfigFile} conexionAbierta={this.state.conexionAbierta} showMessage={this.showMessage}> </LoginPage>\n                )}\n\n                { this.state.mensajeModal.mostrarMensaje ? (\n                    <MessageModal esError={this.state.mensajeModal.esError} esConfirmar={this.state.mensajeModal.esConfirmar} dismissMessage={this.dismissMessageModal}  titulo={this.state.mensajeModal.titulo} mensaje={this.state.mensajeModal.mensaje}> </MessageModal>\n                ) : (\n                    <span></span>\n                )}\n            </div>\n        );\n    }\n}\n"],"file":"app.js"}